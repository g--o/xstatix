#!/bin/bash

# xStatix - the second simplest static website generator in bash
# based on: https://gist.github.com/plugnburn/c2f7cc3807e8934b179e { (c) Revoltech 2015 }
# see LICENSE


# stubs

ROUTEFILE='routes.conf'
ASSETDIR='assets/'
DRAFTSDIR='drafts/'
OUTDIR='out/'
SRCDIR="$DRAFTSDIR"
GENROUTES=true
VERBOSE=false

## routines

# internal

function logVerbose {
	if [ "$VERBOSE" == true ]; then
		echo "[$1]"
	fi
}

function prerenderBlock {
	local blockFile="${1}"
	local blockContent="$(<${blockFile})"
	local L=''
	local includes=$(grep -Po '<!--\s*#include:.*?-->' "$blockFile")
	OLDIFS="$IFS"
	IFS=$'\n'
	for L in $includes; do
		local includedFileName=$(echo -n "$L"| grep -Po '(?<=#include:).*?(?=-->)')
		local includedFile="$includedFileName"
		local includedContent="$(prerenderBlock ${includedFile})"
		blockContent="${blockContent//$L/$includedContent}"
	done
	IFS="$OLDIFS"
	echo -n "$blockContent"
}

function renderBlock {
	local blockText="$(prerenderBlock $1)"
	local sets=$(echo -n "$blockText" | grep -Po '<!--#set:.*?-->')
	local L=''
	OLDIFS="$IFS"
	IFS=$'\n'
	for L in $sets; do
		local set=$(echo -n "$L" | grep -Po '(?<=#set:).*?(?=-->)')
		local setvar="${set%%=*}"
		local setval="${set#*=}"

		blockText="${blockText//$L/}"
		blockText="${blockText//<!--=@${setvar}-->/${setval}}"
		blockText="${blockText//<!---@${setvar}-->/<!---@${setvar}-->${setval}}"
		blockText="${blockText//<!--+@${setvar}-->/${setval}<!--+@${setvar}-->}"
	done
	IFS="$OLDIFS"
	echo -n "$blockText"
}

function loadRoutes {
	if [ "$GENROUTES" == true ]; then
		rm "$ROUTEFILE"
		touch "$ROUTEFILE"

		# get list
		local list=( "${1}.html" )
		[ "${list[0]}" == ".html" ] && list=$(find ${SRCDIR}** 2>/dev/null)

		for file in $list; do
			if [ -f "$file" ]; then
				name=$(basename $file)
				name="${name%.*}"
				if [ "$name" == "index" ]; then name=''; fi
				echo "$file:$name/" >> "$ROUTEFILE"
			fi
		done
		logVerbose "generated default routes"
	fi

	ROUTELIST="$(<$ROUTEFILE)"
	logVerbose "loaded routes"
}

function generate {
	OLDIFS="$IFS"
	IFS=$'\n'

	for route in $ROUTELIST; do
		local blockname="${route%%:*}"
		local blockpath="${route#*:}"
		if [[ "$blockname" && "$blockpath" ]]; then
			mkdir -p "${OUTDIR}${blockpath}"
			renderBlock "$blockname" > "${OUTDIR}${blockpath}index.html"
		fi
	done

	IFS="$OLDIFS"
}

function performAction {
	local actionname="${1}"
	local action="${2}"
	local dest="${3}"
	# parse
	local prefix="${action:0:1}" # +/-/=
	local rest="${action:2}"
	local varname="${rest%%=*}"
	local varval="${rest#*=}"
	# set tokens
	local valdelim=""
	local valregex=""
	local settext=""
	local matchregex=""

	if [ -z "$prefix" ]; then
		logVerbose "got empty action: $actionname"
		return
	fi

	if [ "$actionname" == "set" ]; then
		valdelim="="
		
		if [ ! -z "$varval" ] && [ "$prefix" == "-" ]; then
			valregex="$varval"
		else
			valregex=".*"
		fi
	fi

	matchregex="<!--#${actionname}:${varname}${valdelim}${valregex}-->"
	settext="<!--#${actionname}:${rest}-->"

	# apply
	if [ "$prefix" == "+" ]; then
		echo "$settext" >> ${dest}
	elif [ "$prefix" == "=" ]; then
		local match=$(grep "$matchregex" ${dest})
		if [ -z "$match" ]; then
			echo "$settext" >> ${dest}
		else
			sed -i -E "s/${matchregex}/${settext}/" ${dest}
		fi
	elif [ "$prefix" == "-" ]; then
		local result=$(tac ${dest} | sed "0,/${matchregex}/{s/${matchregex}//}" | tac)
		echo "$result" > ${dest}
	elif [ "$prefix" == "r" ]; then
		sed -i -E "s/$matchregex//" ${dest}
	else
		logVerbose "unknown prefix for action ${action}"
	fi
}

function insertInclude {
	local dest="${1}"
	local include="${INCLUDE}"
	local prefix="${include:0:1}" # +/-
	local includedBlock="${include:2}"

	if [ "$prefix" == "+" ]; then
		if [ -z "$includedBlock" ] || [ ! -f "${includedBlock}" ]; then
			echo "error: invalid include block"
			exit 1
		fi
	fi

	performAction "include" "$include" "$dest"
}

function insertSet {
	local dest="${1}"
	local setline="${SETOPTION}"

	performAction "set" "$setline" "$dest"
}

# user end

function showHelp {
	echo "xStatix"
	echo "  syntax: xstatix [-s|-i|-v|-g|-h|-w|-e|-d|-p|-u]"
	echo "  options:"
	echo "    s	set variable <diff>"
	echo "    i	include block <diff>"
	echo "    v	verbose"
	echo "    g	generate project tree"
	echo "    h	print this help"
	echo "    w	write"
	echo "    e	edit"
	echo "    d	delete"
	echo "    p	publish"
	echo "    u	unpublish"
	echo "  default:"
	echo "    generates default project file tree"
	echo "  notes:"
	echo "    - <diff>: =@ set, +@ to add, -@ remove, r@ remove all. (e.g: +@var=val)"
	echo "    - use the options in the order you want them!"
	exit 0
}

function makeProjectTree {
	mkdir -p "$ASSETDIR"
	mkdir -p "$DRAFTSDIR"
	rm -rf "${OUTDIR}"/*

	if [[ "$ASSETDIR" ]]; then 
		cp -rd "$ASSETDIR" "${OUTDIR}/"
	fi

	touch "$ROUTEFILE"
	logVerbose "created project tree"
}

function writeDraft {
	loadRoutes

	# read name
	local name="${1}.html"
	local dest="${DRAFTSDIR}${name}"

	insertInclude "${dest}"
	touch "${dest}"

	# done
	echo "draft $dest written"
}

function deleteDraft {
	local dest="${DRAFTSDIR}${1}"
	if [ "$dest" == "${DRAFTSDIR}" ] || [ ! -f "${dest}.html" ]; then
		exit 1
	fi

	rm "${dest}.html"
	echo "deleted ${dest}"
	exit 0
}

function publishPage {
	loadRoutes
	generate

	if [[ "$ASSETDIR" ]]; then 
		cp -rd "${ASSETDIR}/." "${OUTDIR}/"
	fi

	echo "published draft ${1}"
	exit 0
}

function unpublishPage {
	local dest=${OUTDIR}${1}.html
	if [ "$dest" == "${OUTDIR}.html" ]; then
		exit 1
	fi

	rm -rf "${dest}"

	echo "unpublished ${dest}"
	exit 0
}

function editDraft {
	local draft="${1}.html"
	local dest=${DRAFTSDIR}${draft}

	insertInclude "$dest"
	insertSet "$dest"

	echo "edit complete"
	exit 0
}

# main
# read options

while getopts ":s:i:vghw:e:d:p:u:" opt; do
	case ${opt} in
	s ) SETOPTION=${OPTARG} && logVerbose "setting ${OPTARG}" ;;
	i ) INCLUDE=${OPTARG} && logVerbose "including ${OPTARG}" ;;
	v ) VERBOSE=true ;;
	g ) makeProjectTree ;;
	h ) showHelp ;;
	w ) writeDraft ${OPTARG} ;;
	e ) editDraft ${OPTARG} ;;
	d ) deleteDraft ${OPTARG} ;;
	p ) publishPage ${OPTARG} ;;
	u ) unpublishPage ${OPTARG} ;;
	\? ) echo "Invalid option: $OPTARG" 1>&2; exit 1 ;;
	esac
done
shift $((OPTIND -1))